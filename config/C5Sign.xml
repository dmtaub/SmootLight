<!---All configuration items contain a "Class" tag specifying the python class they represent, and an "Args" tag specifying the args to be passed in.-->

<!-- WHERE TO PUT YOUR CODE:

I've divided the InputConfiguation and BehaviorConfiguration into 2 big
sections: animation-specific and common. When writing behaviors and inputs,
please adhere to the following convention, in the interest if keeping this
increasingly huge file coherent:

When creating a new animation:
    Make a new comment (begin and end tags, both) section under the behavior 
    and input tags in the animation-specific area, and put any 
    behaviors/inputs you write under there. When you're finished, add the
    appropriate behavior/input to the main TimeSwitch at the end of this file.

When creating a new behavior:
    Write the new behavior within the comment bookends. If you think the
    behavior is general enough that many other animations will use it, then
    you may instead put it under the common area, under the appropriate section

When creating a new input:
    Same logic as when creating a new behavior

When using an old input/behavior:
    If the input/behavior is in the respective Configuration's common area,
    then you're fine. If it is currently located in another animation's
    animation-specific section, then move it into the appropriate common
    section.

-->

<LightInstallation>
    <InstallationConfiguration>
        <Defaults>
            <PixelMapper>c5signmap</PixelMapper>
        </Defaults>
    </InstallationConfiguration>
    <PixelConfiguration>
        <InheritsFrom>layouts/C5SignLayout.xml</InheritsFrom>
    </PixelConfiguration>
    <PixelMapperConfiguration>
        <PixelMapper>
            <Class>pixelmappers.SimpleMapper</Class>
            <Args>
                <Id>simplemap</Id>
                <CutoffDist>20</CutoffDist>
            </Args>
        </PixelMapper>
        <PixelMapper>
            <Class>pixelmappers.GaussianMapper</Class>
            <Args>
                <Id>gaussmap</Id>
                <CutoffDist>4</CutoffDist>
                <MinWeight>0.1</MinWeight>
                <Width>1</Width>
                <Height>1</Height>
            </Args>
        </PixelMapper>
        <PixelMapper>
            <Class>pixelmappers.C5SignMapper</Class>
            <Args>
                <Id>c5signmap</Id>
                <CutoffDist>20</CutoffDist>
            </Args>
        </PixelMapper>
    </PixelMapperConfiguration>
    <RendererConfiguration>
        <APPEND><Renderer>
            <InheritsFrom>renderers/C5Renderer.xml</InheritsFrom>
        </Renderer></APPEND>
    </RendererConfiguration>
    <InputConfiguration>
        <APPEND>
        <!-- ********* Common Inputs *********** -->
        <InputElement>
            <Class>inputs.InitialLocationInput</Class>
            <Doc>Inputs the center point once</Doc>
            <Args>
                <Id>centeronce</Id>
                <xPos>0.5</xPos>
                <yPos>0.5</yPos>
            </Args>
        </InputElement>
        <InputElement>
            <Class>inputs.ContinuousCenterInput</Class>
            <Doc>Returns center location every 700 milis</Doc>
            <Args>
                <Id>center</Id>
                <RefreshInterval>700</RefreshInterval>
            </Args>
        </InputElement>
        <!-- ********* End Common Inputs *********** -->


        <!-- ********* ScanningBars Input *********** -->
        <InputElement>
            <Class>inputs.ParametricLocationInput</Class>
            <Doc>Inputs center-right every 1800 millis</Doc>
            <Args>
                <Id>centerright</Id>
                <xEquation>1</xEquation>
                <yEquation>.5</yEquation>
                <RefreshInterval>1200</RefreshInterval>
            </Args>
        </InputElement>
        <InputElement>
            <Class>inputs.ParametricLocationInput</Class>
            <Doc>Inputs center-left every 1800 millis</Doc>
            <Args>
                <Id>centerleft</Id>
                <xEquation>0</xEquation>
                <yEquation>.5</yEquation>
                <RefreshInterval>1200</RefreshInterval>
            </Args>
        </InputElement>
        <!-- ********* End ScanningBars Input *********** -->
        <!-- ********* Rain Input *********** -->
        <InputElement>
            <Class>inputs.ParametricLocationInput</Class>
            <Doc>spawns a pixel event somewhere at the top of the screen</Doc>
            <Args>
                <Id>random_top</Id>
                <xEquation>random.random()</xEquation>
                <yEquation>0</yEquation>
                <RefreshInterval>100</RefreshInterval>
            </Args>
        </InputElement>
        <!-- ********* End Rain Input *********** -->
        <!-- ********* OSC Input *********** -->
        <InputElement>
            <Class>inputs.OSCInput</Class>
            <Doc>PHONE INPUT!</Doc>
            <Args>
                <Id>osc</Id>
                <Port>1234</Port>
                <RefreshInterval>10</RefreshInterval>
            </Args>
        </InputElement>
        <!-- ********* End OSC Input *********** -->

        <!-- ********* Unused Sign Inputs ********* -->
        <InputElement>
            <Class>inputs.UDPInput</Class>
            <Doc>UDP input</Doc>
            <Args>
                <Id>udp</Id>
                <Port>3344</Port>
                <RefreshInterval>50</RefreshInterval>
            </Args>
        </InputElement>
        <!-- ********* End Unused Sign Inputs ********* -->
        </APPEND>
    </InputConfiguration>
    <BehaviorConfiguration>



<!-- **************** Common Behaviors ********* -->


        <!-- ******** Decays ********* -->
        <Behavior Id="slowdecay">
            <InheritsFrom>behaviors/PixelDecay.xml</InheritsFrom>
            <Doc>Decays the pixel brightness with coeff of .001</Doc>
            <Args>
                <Coefficient>.001</Coefficient>
            </Args>
        </Behavior>
        <Behavior Id="meddecay">
            <InheritsFrom>behaviors/PixelDecay.xml</InheritsFrom>
            <Doc>Decays the pixel brightness with coeff of .003</Doc>
            <Args>
                <Coefficient>.003</Coefficient>
            </Args>
        </Behavior>
        <Behavior Id="decay">
            <InheritsFrom>behaviors/PixelDecay.xml</InheritsFrom>
            <Doc>Decay a pixel event over several frames</Doc>
        </Behavior>
        <Behavior Id="singleframe">
            <InheritsFrom>behaviors/SingleFrame.xml</InheritsFrom>
            <Doc>Render a pixel event for a single frame</Doc>
        </Behavior>
        <Behavior Id="recursivedecay" InitialResponseCount="50">
            <Doc>recursive decay for a pixel event - use in a recursive hook</Doc>
            <InheritsFrom>behaviors/LoopAndDie.xml</InheritsFrom>
        </Behavior>
        <Behavior Id="shortrecursivedecay" InitialResponseCount="100">
            <Doc>short recursive decay for a pixel event - use in a recursive hook</Doc>
            <InheritsFrom>behaviors/LoopAndDie.xml</InheritsFrom>
        </Behavior>
        <Behavior Id="longrecursivedecay" InitialResponseCount="100">
            <Doc>long recursive decay for a pixel event - use in a recursive hook</Doc>
            <InheritsFrom>behaviors/LoopAndDie.xml</InheritsFrom>
        </Behavior>
        <!-- ******** End Decays ********* -->
        <!-- ******** Colors ********* -->
        <Behavior>
            <InheritsFrom>behaviors/RandomColor.xml</InheritsFrom>
            <Doc>always outputs green</Doc>
            <Args>
                <Id>greencolor</Id>
                <ColorList>
                    <Val>(0,255,0)</Val>
                </ColorList>
            </Args>
        </Behavior>
        <Behavior>
            <InheritsFrom>behaviors/RandomColor.xml</InheritsFrom>
            <Doc>always outputs blue</Doc>
            <Args>
                <Id>bluecolor</Id>
                <ColorList>
                    <Val>(0,0,255)</Val>
                </ColorList>
            </Args>
        </Behavior>
        <Behavior>
            <InheritsFrom>behaviors/RandomColor.xml</InheritsFrom>
            <Doc>Inputs color red</Doc>
            <Args>
                <Id>redcolor</Id>
                <ColorList>
                    <Color>(255,0,0)</Color>
                </ColorList>
            </Args>
        </Behavior>
        <Behavior Id="colorchange">
            <InheritsFrom>behaviors/RandomColor.xml</InheritsFrom>
            <Doc>Inputs a random color</Doc>
        </Behavior>
        <Behavior>
            <Class>behaviors.XYMove</Class>
            <Doc>move rain down .5</Doc>
            <Args>
                <Id>rain_xymove</Id>
                <XStep>0</XStep>
                <YStep>0</YStep>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.ColorShift</Class>
            <Doc>cycles through hue</Doc>
            <Args>
                <Id>colorshift</Id>
            </Args>
        </Behavior>
        <!-- ******** End Colors ********* -->
        <!-- ******** Chaining Behaviors ********* -->
        <Behavior>
            <Class>behaviors.ResponseMover</Class>
            <Doc>moves specified objects in designated chain</Doc>
            <Args>
                <Id>mover</Id>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.RunFinite</Class>
            <Doc>Only allows the first input through; drops all subsequent</Doc>
            <Args>
                <Id>runonce</Id>
                <Iterations>1</Iterations>
            </Args>
        </Behavior>
        <!-- ******** End Chaining Behaviors ********* -->
        <!-- ******** Location Mask Behaviors ********* -->
        <Behavior>
            <Class>behaviors.LocationMask</Class>
            <Doc>Restrict pixels to only border lights</Doc>
            <Args>
                <Id>stripsonly</Id>
                <Location>ts.all ls.all rs.all bs.all</Location>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.LocationMask</Class>
            <Doc>Restrict pixels to only interior lights</Doc>
            <Args>
                <Id>wordsonly</Id>
                <Location>wt.all cl.all c5.all</Location>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.AllPixels</Class>
            <Doc>All pixels are lit</Doc>
            <Args>
                <Id>square</Id>
                <Width>20</Width>
            </Args>
        </Behavior>
        <!-- ******** End Location Mask Behaviors ********* -->


<!-- **************** Animation-specific Behaviors ********* -->


        <!-- ******** Rain Behaviors ********* -->
        <Behavior>
            <Class>behaviors.ModifyParam</Class>
            <Doc>move y by .1</Doc>
            <Args>
               <Id>rain_modifyY</Id>
               <ParamType>Sensor</ParamType>
               <ParamName>YStep</ParamName>
               <ParamOp>{val}+.01</ParamOp>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>increment the rain</Doc>
            <Args>
                <Id>point_move</Id>
                <ChainedBehaviors>
                    <Id>rain_xymove</Id>
                    <Id>rain_modifyY</Id>
                    <Id>shortrecursivedecay</Id>
                </ChainedBehaviors>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>main rain behavior loop</Doc>
            <Args>
                <Id>falling_points</Id>
                <ChainedBehaviors>
                    <Id>greencolor</Id>
                    <Id>mover</Id>
                    <Id>decay</Id>
                </ChainedBehaviors>
                <RecursiveHooks>{'mover':'point_move'}</RecursiveHooks>
                <Mapper>gaussmap</Mapper>
                <RenderToScreen>False</RenderToScreen>
            </Args>
        </Behavior>
        <!-- ******** End Rain Behaviors ********* -->
        <!-- ******** Vertical Bar Behaviors ********* -->
        <Behavior>
            <Class>behaviors.ModifyParam</Class>
            <Doc>increment the x-value by 1</Doc>
            <Args>
                <Id>incrVertBarLoc</Id>
                <ParamName>xLoc</ParamName>
                <ParamOp>{val}+1</ParamOp>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.ModifyParam</Class>
            <Doc>decrement the x-value by 1</Doc>
            <Args>
                <Id>decrVertBarLoc</Id>
                <ParamName>xLoc</ParamName>
                <ParamOp>{val}-1</ParamOp>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.VerticalBar</Class>
            <Doc>Creates a vertical bar with input's x-position</Doc>
            <Args>
                <Id>vertBar</Id>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>draws and increments a vertical bar</Doc>
            <Args>
                <Id>bar_incr</Id>
                <ChainedBehaviors>
                    <Id>vertBar</Id>
                    <Id>incrVertBarLoc</Id>
                    <Id>recursivedecay</Id>
                </ChainedBehaviors>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>draws and decrements a vertical bar</Doc>
            <Args>
                <Id>bar_decr</Id>
                <ChainedBehaviors>
                    <Id>vertBar</Id>
                    <Id>decrVertBarLoc</Id>
                    <Id>recursivedecay</Id>
                </ChainedBehaviors>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>behavior for scanning left vertical bars</Doc>
            <Args>
                <Id>scanningbarsright</Id>
                <Inputs>
                    <Id>centerleft</Id>
                </Inputs>
                <ChainedBehaviors>
                    <Id>colorchange</Id>
                    <Id>mover</Id>
                    <Id>slowdecay</Id>
                </ChainedBehaviors>
                <RecursiveHooks>{'mover':'bar_incr'}</RecursiveHooks>
                <RenderToScreen>False</RenderToScreen>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>behavior for scanning right vertical bars</Doc>
            <Args>
                <Id>scanningbarsleft</Id>
                <Inputs>
                    <Id>centerright</Id>
                </Inputs>
                <ChainedBehaviors>
                    <Id>colorchange</Id>
                    <Id>mover</Id>
                    <Id>slowdecay</Id>
                </ChainedBehaviors>
                <RecursiveHooks>{'mover':'bar_decr'}</RecursiveHooks>
                <RenderToScreen>False</RenderToScreen>
            </Args>
        </Behavior>
        <!-- ******** End Vertical Bar Behaviors ********* -->
        <!-- ******** Colored Frame Behaviors ********* -->
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>cycling color hues, all pixels</Doc>
            <Args>
                <Id>coloredframe</Id>
                <!--Inputs>
                    <Id>centeronce</Id>
                </Inputs-->
                <ChainedBehaviors>
                    <Id>runonce</Id>
                    <Id>redcolor</Id>
                    <Id>square</Id>
                    <Id>mover</Id>
                    <Id>singleframe</Id>
                </ChainedBehaviors>
                <RecursiveHooks>{'mover':'colorshift'}</RecursiveHooks>
                <RenderToScreen>False</RenderToScreen>
            </Args>
        </Behavior>
        <!-- ******** End Colored Frame Behaviors ********* -->
        <!-- ******** Segmented Screen Behaviors ********* -->
        <Behavior>
            <Class>behaviors.TimeSwitch</Class>
            <Doc>Deck for interior light animations</Doc>
            <Args>
                <Id>interiorswitch</Id>
                <!--Inputs>
                    <Id>centerleft</Id>
                    <Id>centerright</Id>
                    <Id>center</Id>
                </Inputs-->
                <TimeMap>{'scanningbarsleft':4,'scanningbarsright':4,'coloredframe':5}</TimeMap>
                <InputMap>{'scanningbarsleft':'centerright','scanningbarsright':'centerleft','coloredframe':'center'}</InputMap>
                <RenderToScreen>False</RenderToScreen>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.TimeSwitch</Class>
            <Doc>Deck for exterior light animations</Doc>
            <Args>
                <Id>exteriorswitch</Id>
                <!--Inputs>
                    <Id>centerleft</Id>
                    <Id>centerright</Id>
                    <Id>center</Id>
                </Inputs-->
                <TimeMap>{'scanningbarsright':5,'coloredframe':7,'scanningbarsleft':5}</TimeMap>
                <InputMap>{'scanningbarsleft':'centerright','scanningbarsright':'centerleft','coloredframe':'center'}</InputMap>
                <RenderToScreen>False</RenderToScreen>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>interior light animations, masked</Doc>
            <Args>
                <Id>screeninterior</Id>
                <ChainedBehaviors>
                    <Id>interiorswitch</Id>
                    <Id>wordsonly</Id>
                </ChainedBehaviors>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>exterior light animations, masked</Doc>
            <Args>
                <Id>screenexterior</Id>
                <ChainedBehaviors>
                    <Id>exteriorswitch</Id>
                    <Id>stripsonly</Id>
                </ChainedBehaviors>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.SplitBehavior</Class>
            <Doc>main segmented screen behavior - combines interior and exterior behavior chains</Doc>
            <Args>
                <Id>segmentedscreen</Id>
                <BehaviorList>
                    <Id>screeninterior</Id>
                    <Id>screenexterior</Id>
                </BehaviorList>
            </Args>
        </Behavior>
        <!-- ******** End Segmented Screen Behaviors ********* -->
        <!-- ******** Bouncing Ball Behaviors ********* -->
        <Behavior>
            <Class>behaviors.XYMove</Class>
            <Doc>Move the location of an event by vector [0,1]</Doc>
            <Args>
                <Id>xymove</Id>
                <XStep>1</XStep>
                <YStep>1</YStep>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.RestrictLocation</Class>
            <Doc>Bound ball's x-values</Doc>
            <Args>
                <Id>xbounce</Id>
                <Action>{val}*-1</Action>
                <ParamName>XStep</ParamName>
                <LocationRestriction>{x}&lt;2 or {x}&gt;48</LocationRestriction>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.RestrictLocation</Class>
            <Doc>Bound ball's y-values</Doc>
            <Args>
                <Id>ybounce</Id>
                <Action>{val}*-1</Action>
                <ParamName>YStep</ParamName>
                <LocationRestriction>{y}&lt;2 or {y}&gt;24</LocationRestriction>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>increment and bounce ball</Doc>
            <Args>
                <Id>movebounce</Id>
                <ChainedBehaviors>
                    <Id>xymove</Id>
                    <Id>ybounce</Id>
                    <Id>xbounce</Id>
                    <Id>longrecursivedecay</Id>
                </ChainedBehaviors>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>Bouncing Ball behavior chaining</Doc>
            <Args>
                <Id>runcolordecay</Id>
                <ChainedBehaviors>
                    <Id>colorchange</Id>
                    <Id>mover</Id>
                    <!--<Id>square</Id>-->
                    <Id>decay</Id>
                </ChainedBehaviors>
                <RecursiveHooks>{'mover':'movebounce'}</RecursiveHooks>
                <RenderToScreen>False</RenderToScreen>
            </Args>
        </Behavior>
        <!-- ******** End Bouncing Ball Behaviors ********* -->
        <!-- ******** Expanding Circle Behaviors ********* -->
        <Behavior>
            <Class>behaviors.Oval</Class>
            <Doc>defines the inner border of ring</Doc>
            <Args>
                <Id>innercircle</Id>
                <Radius>0</Radius>
                <Outside>True</Outside>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.Oval</Class>
            <Doc>defines the outer border of ring</Doc>
            <Args>
                <Id>outercircle</Id>
                <Radius>3</Radius>
                <Combine>True</Combine>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.ModifyParam</Class>
            <Doc>increments the inner border of ring</Doc>
            <Args>
                <Id>incrinner</Id>
                <ParamOp>{val}+.6</ParamOp>
                <ParamName>innercircleRadius</ParamName>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.ModifyParam</Class>
            <Doc>increments the outer border of ring</Doc>
            <Args>
                <Id>incrouter</Id>
                <ParamOp>{val}+.6</ParamOp>
                <ParamName>outercircleRadius</ParamName>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>draws and increments an expanding ring</Doc>
            <Args>
                <Id>circle_expand</Id>
                <ChainedBehaviors>
                    <Id>innercircle</Id>
                    <Id>outercircle</Id>
                    <Id>incrinner</Id>
                    <Id>incrouter</Id>
                    <Id>recursivedecay</Id>
                </ChainedBehaviors>
            </Args>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>expanding circles form the center of the screen</Doc>
            <Args>
                <Id>expandingcircles</Id>
                <ChainedBehaviors>
                    <Id>colorchange</Id>
                    <Id>mover</Id>
                    <Id>decay</Id>
                    <!--Id>singleframe</Id-->
                </ChainedBehaviors>
                <RecursiveHooks>{'mover':'circle_expand'}</RecursiveHooks>
            </Args>
        </Behavior>
        <!-- ******** End Expanding Circle Behaviors ********* -->
        <!-- ******** OSC Behaviors ********* -->
        <Behavior>
            <Args>
                <Id>touchosc</Id>
            </Args>
            <Class>behaviors.TouchOSC</Class>
        </Behavior>
        <Behavior>
            <Class>behaviors.BehaviorChain</Class>
            <Doc>Creates a large colored circle at the location specified by osc</Doc>
            <Args>
                <Id>OSCTouchChase</Id>
                <Inputs>
                    <Id>osc</Id>
                </Inputs>
                <ChainedBehaviors>
                    <Id>touchosc</Id>
                    <Id>decay</Id>
                </ChainedBehaviors>
                <Mapper>gaussmap</Mapper>
                <RenderToScreen>False</RenderToScreen>
            </Args>
        </Behavior>
        <!-- ******** End OSC Behaviors ********* -->

        <!-- ******** Other Behaviors ********* -->
       <Behavior>
            <Class>behaviors.DebugBehavior</Class>
            <Args>
                <Id>debug</Id>
                <z-index>0</z-index>
                <Inputs>
                    <Id>pygamekey</Id>
                    <Id>udp</Id>
                </Inputs>
            </Args>
        </Behavior>
        <!-- ******** End Other Behaviors ********* -->


<!-- **************** Main Execution Behaviors ********* -->


        <!-- ******** MAIN BEHAVIOR DECK ********* -->
        <Behavior>
            <Class>behaviors.TimeSwitch</Class>
            <Doc>MAIN: holds primary deck of behaviors to cycle through</Doc>
            <Args>
                <Id>main</Id>
                <Inputs>
                    <Id>centerleft</Id>
                    <Id>centerright</Id>
                    <Id>center</Id>
                    <Id>random_top</Id>
                </Inputs>
                <TimeMap>{'falling_points':10,'segmentedscreen':30,'runcolordecay':10,'expandingcircles':10}</TimeMap>
                <InputMap>{'falling_points':'random_top','segmentedscreen':['centerright','center','centerleft'], 'runcolordecay':'center',\
                    'expandingcircles':'center'}</InputMap>
                <RenderToScreen>True</RenderToScreen>
            </Args>
        </Behavior>
        <!-- ******** END MAIN BEHAVIOR DECK ********* -->
    </BehaviorConfiguration>
</LightInstallation>
